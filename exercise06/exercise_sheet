################################################################################
###################################Exercise 06##################################

IMPORTANT: Plagiarism is the use of someone elseâ€™s work, words, code or ideas as if
           they were your own. Plagiarism is a serious offense and will not be
           tolerated. You must also cite any sources from which your code or any
           ideas come from. Give proper credit while adding your own reflection
           will likely earn you higher scores.
           You may include citations as comments in the code block where the idea
           is used or as a footnote in non-code exercises.

**covers Lesson_07 & Lesson_08
With this exercise, we learn more about recursion and sorting by reading code which we did not write
and trying to make sense out of it. We also work with lists. (11 marks)

1) What output does the following program return when called?

       def misch(a):
            if a>1:
                return masch(a-1) + masch(a-2)
            else:
                return 42

        def masch(b):
            if b>1:
                return misch(b) + 1
            else:
                return 4

        # The call
        print(misch(4))


2) In order to perform a binary search in a sequence of elements, as presented in
   the lecture, this sequence has to be sorted. For this purpose the following procedure
   (also known as selection location) can be performed. Let L be a list of numbers.

        def selection_sort(L):
            n = len(L)
            for u in range(n-1, 0, -1):
                max = L[0]
                pos = 0
                for p in range(1, u+1, 1):
                    if max <= L[p]:
                        max = L[p]
                        pos = p
                if pos != u:
                    L[pos] = L[u]
                    L[u] = max
            return L

   a) Describe the procedure in your own words.
   b) Does this program always sort correctly? Justify your answer.
   c) Determine the number of comparisons that will be made for lists of size 4, 6 and 8.
   d) From c), state the number of comparisons are necessary for lists of length n? (as a formula)
   Save your answers in a separate text file.

3) Implement a function in max_sum_subarray.py which takes as required arguments an
   array of integers and a number, finds the maximum sum of a sub-array with length
   equal to the number passed to the function.
   A sub-array must consecutive elements of the original array. For example,
   if array = [6, 9, 23, 60, 2, 0] and length = 3, [23, 60, 2] is a sub-array while [9, 2, 0] is not.
   The array can be an empty list.

4) Write a function sans_duplicates which takes a sorted list of integers as input and returns the same list
   but without duplicate list members.
   For example, given list = [3, 3, 3, 4, 4, 8, 10, 10, 10, 10], the result = [3, 4, 8, 10]




