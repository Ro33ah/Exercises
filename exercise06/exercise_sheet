################################################################################
###################################Exercise 06##################################

**covers Lesson_07 & Lesson_08
1) Recursion: We can learn a lot from reading code which we did not write.
   What output does the following program return when called?

       def misch(a):
            if a>1:
                return masch(a-1) + masch(a-2)
            else:
                return 42

        def masch(b):
            if b>1:
                return misch(b) + 1
            else:
                return 4

        # The call
        print(misch(4))


2) In order to perform a binary search in a sequence of elements, as presented in
   the lecture, this sequence has to be sorted. For this purpose the following procedure
   (also known as selection location) can be performed. Let L be a list of numbers.

        def selection_sort(L):
            n = len(L)
            for u in range(n-1, 0, -1):
                max = L[0]
                pos = 0
                for p in range(1, u+1, 1):
                    if max <= L[p]:
                        max = L[p]
                        pos = p
                if pos != u:
                    L[pos] = L[u]
                    L[u] = max
            return L

   a) Describe the procedure in your own words.
   b) Does this program always sort correctly? Justify your answer.
   c) Determine the number of comparisons that will be made for lists of size 4, 6 and 8.
   d) From c), state the number of comparisons are necessary for lists of length n? (as a formula)

Must be from file
Map out possible output
Tailored data structure, IO, string parsing
3) Design and implement a quiz program. The program should read question and answer
    information from a file. For example, a state capital quiz would contain the state
    and its capital on each line (e.g. , "ThÃ¼ringen" : Erfurt). Your program should ask
    a fixed number of questions and output the number of correct answers.
    Create at least three separate functions in your design.

4) Write a function sans_duplicates which takes a sorted list of integers as input and returns the same list
   but without duplicate list members.
   For example, given list = [3, 3, 3, 4, 4, 8, 10, 10, 10, 10], the result = [3, 4, 8, 10]




